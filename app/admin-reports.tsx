import React, { useState, useEffect } from 'react';
import { useNavigation } from '@react-navigation/native';
import { 
  ScrollView, 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  TextInput,
  Alert,
  Modal,
  FlatList,
  Dimensions
} from 'react-native';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

const AdminReports = () => {
  const navigation = useNavigation();
  
  const [reports, setReports] = useState([
    {
      id: "1",
      title: "Daily Revenue Report",
      type: "Financial",
      period: "2024-01-15",
      status: "Generated",
      generatedBy: "System",
      fileSize: "2.3 MB",
      downloadCount: 15,
      lastDownloaded: "2024-01-15T14:30:00Z"
    },
    {
      id: "2",
      title: "User Registration Analytics",
      type: "Analytics",
      period: "January 2024",
      status: "Generated",
      generatedBy: "Admin User",
      fileSize: "1.8 MB",
      downloadCount: 8,
      lastDownloaded: "2024-01-15T12:15:00Z"
    },
    {
      id: "3",
      title: "Hotel Booking Summary",
      type: "Booking",
      period: "Week 2, Jan 2024",
      status: "Generating",
      generatedBy: "System",
      fileSize: "0 MB",
      downloadCount: 0,
      lastDownloaded: null
    },
    {
      id: "4",
      title: "Emergency Response Report",
      type: "Emergency",
      period: "2024-01-01 to 2024-01-15",
      status: "Generated",
      generatedBy: "Emergency Team",
      fileSize: "3.1 MB",
      downloadCount: 3,
      lastDownloaded: "2024-01-15T10:45:00Z"
    },
    {
      id: "5",
      title: "Volunteer Performance Report",
      type: "Volunteer",
      period: "Q4 2023",
      status: "Generated",
      generatedBy: "HR Team",
      fileSize: "4.2 MB",
      downloadCount: 12,
      lastDownloaded: "2024-01-14T16:20:00Z"
    }
  ]);

  const [filteredReports, setFilteredReports] = useState(reports);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [showGenerateModal, setShowGenerateModal] = useState(false);

  useEffect(() => {
    filterReports();
  }, [searchTerm, filterType, filterStatus, reports]);

  const filterReports = () => {
    let filtered = reports;

    if (searchTerm) {
      filtered = filtered.filter(report =>
        report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        report.type.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (filterType !== 'all') {
      filtered = filtered.filter(report => report.type === filterType);
    }

    if (filterStatus !== 'all') {
      filtered = filtered.filter(report => report.status === filterStatus);
    }

    setFilteredReports(filtered);
  };

  const stats = {
    total: reports.length,
    generated: reports.filter(r => r.status === 'Generated').length,
    generating: reports.filter(r => r.status === 'Generating').length,
    totalDownloads: reports.reduce((sum, r) => sum + r.downloadCount, 0),
    totalSize: "11.4 MB"
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Generated': return '#388e3c';
      case 'Generating': return '#f57c00';
      case 'Failed': return '#d32f2f';
      default: return '#666';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'Financial': return '💰';
      case 'Analytics': return '📊';
      case 'Booking': return '📅';
      case 'Emergency': return '🚨';
      case 'Volunteer': return '🤝';
      default: return '📄';
    }
  };

  const formatLastDownloaded = (lastDownloaded: string | null) => {
    if (!lastDownloaded) return 'Never';
    const date = new Date(lastDownloaded);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffHours < 24) return `${diffHours} hours ago`;
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString();
  };

  const renderReportItem = ({ item: report }) => (
    <View style={styles.reportCard}>
      <View style={styles.reportHeader}>
        <View style={styles.reportInfo}>
          <Text style={styles.reportTitle}>
            {getTypeIcon(report.type)} {report.title}
          </Text>
          <Text style={styles.reportPeriod}>📅 Period: {report.period}</Text>
          <Text style={styles.reportGeneratedBy}>👤 Generated by: {report.generatedBy}</Text>
          <View style={styles.reportMeta}>
            <Text style={styles.reportSize}>📁 {report.fileSize}</Text>
            <Text style={styles.reportDownloads}>⬇️ {report.downloadCount} downloads</Text>
            <Text style={styles.reportLastDownload}>🕒 Last: {formatLastDownloaded(report.lastDownloaded)}</Text>
          </View>
        </View>
        <View style={styles.reportStatus}>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(report.status) }]}>
            <Text style={styles.statusText}>{report.status}</Text>
          </View>
        </View>
      </View>
      
      <View style={styles.reportActions}>
        {report.status === 'Generated' && (
          <TouchableOpacity style={[styles.actionButton, styles.downloadButton]}>
            <Text style={styles.actionButtonText}>⬇️ Download</Text>
          </TouchableOpacity>
        )}
        <TouchableOpacity style={[styles.actionButton, styles.viewButton]}>
          <Text style={styles.actionButtonText}>👁️ Preview</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.actionButton, styles.shareButton]}>
          <Text style={styles.actionButtonText}>📤 Share</Text>
        </TouchableOpacity>
        {report.status === 'Generating' && (
          <TouchableOpacity style={[styles.actionButton, styles.cancelButton]}>
            <Text style={styles.actionButtonText}>❌ Cancel</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={styles.gridContainer}>
        {/* Reports Stats Cards */}
        <View style={styles.statsRow}>
          <View style={[styles.statCard, { backgroundColor: '#1976d2' }]}>
            <View style={styles.statContent}>
              <View>
                <Text style={styles.statNumber}>{stats.total}</Text>
                <Text style={styles.statLabel}>Total Reports</Text>
              </View>
              <Text style={styles.statIcon}>📊</Text>
            </View>
          </View>
          
          <View style={[styles.statCard, { backgroundColor: '#388e3c' }]}>
            <View style={styles.statContent}>
              <View>
                <Text style={styles.statNumber}>{stats.generated}</Text>
                <Text style={styles.statLabel}>Generated</Text>
              </View>
              <Text style={styles.statIcon}>✅</Text>
            </View>
          </View>
          
          <View style={[styles.statCard, { backgroundColor: '#f57c00' }]}>
            <View style={styles.statContent}>
              <View>
                <Text style={styles.statNumber}>{stats.generating}</Text>
                <Text style={styles.statLabel}>Generating</Text>
              </View>
              <Text style={styles.statIcon}>⏳</Text>
            </View>
          </View>
          
          <View style={[styles.statCard, { backgroundColor: '#7b1fa2' }]}>
            <View style={styles.statContent}>
              <View>
                <Text style={styles.statNumber}>{stats.totalDownloads}</Text>
                <Text style={styles.statLabel}>Downloads</Text>
              </View>
              <Text style={styles.statIcon}>⬇️</Text>
            </View>
          </View>
        </View>

        {/* Quick Stats */}
        <View style={styles.quickStats}>
          <View style={[styles.quickStatCard, { backgroundColor: '#4caf50' }]}>
            <View style={styles.quickStatContent}>
              <View>
                <Text style={styles.quickStatNumber}>{stats.totalSize}</Text>
                <Text style={styles.quickStatLabel}>Total Storage Used</Text>
              </View>
              <Text style={styles.quickStatIcon}>💾</Text>
            </View>
          </View>
          
          <View style={[styles.quickStatCard, { backgroundColor: '#ff9800' }]}>
            <View style={styles.quickStatContent}>
              <View>
                <Text style={styles.quickStatNumber}>5</Text>
                <Text style={styles.quickStatLabel}>Report Types</Text>
              </View>
              <Text style={styles.quickStatIcon}>📋</Text>
            </View>
          </View>
        </View>

        {/* Reports Management Paper */}
        <View style={styles.managementPaper}>
          <View style={styles.managementHeader}>
            <Text style={styles.managementTitle}>
              Analytics & Reports
            </Text>
            <TouchableOpacity
              style={styles.addButton}
              onPress={() => setShowGenerateModal(true)}
            >
              <Text style={styles.addButtonText}>📊 Generate Report</Text>
            </TouchableOpacity>
          </View>

          {/* Filters */}
          <View style={styles.filtersContainer}>
            <TextInput
              style={styles.searchInput}
              placeholder="Search reports..."
              value={searchTerm}
              onChangeText={setSearchTerm}
            />
            
            <View style={styles.filterRow}>
              <TouchableOpacity 
                style={[styles.filterButton, filterType === 'all' && styles.activeFilter]}
                onPress={() => setFilterType('all')}
              >
                <Text style={[styles.filterText, filterType === 'all' && styles.activeFilterText]}>All Types</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.filterButton, filterType === 'Financial' && styles.activeFilter]}
                onPress={() => setFilterType('Financial')}
              >
                <Text style={[styles.filterText, filterType === 'Financial' && styles.activeFilterText]}>💰 Financial</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.filterButton, filterType === 'Analytics' && styles.activeFilter]}
                onPress={() => setFilterType('Analytics')}
              >
                <Text style={[styles.filterText, filterType === 'Analytics' && styles.activeFilterText]}>📊 Analytics</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.filterButton, filterType === 'Booking' && styles.activeFilter]}
                onPress={() => setFilterType('Booking')}
              >
                <Text style={[styles.filterText, filterType === 'Booking' && styles.activeFilterText]}>📅 Booking</Text>
              </TouchableOpacity>
            </View>

            <View style={styles.filterRow}>
              <TouchableOpacity 
                style={[styles.filterButton, filterStatus === 'all' && styles.activeFilter]}
                onPress={() => setFilterStatus('all')}
              >
                <Text style={[styles.filterText, filterStatus === 'all' && styles.activeFilterText]}>All Status</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.filterButton, filterStatus === 'Generated' && styles.activeFilter]}
                onPress={() => setFilterStatus('Generated')}
              >
                <Text style={[styles.filterText, filterStatus === 'Generated' && styles.activeFilterText]}>✅ Generated</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.filterButton, filterStatus === 'Generating' && styles.activeFilter]}
                onPress={() => setFilterStatus('Generating')}
              >
                <Text style={[styles.filterText, filterStatus === 'Generating' && styles.activeFilterText]}>⏳ Generating</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Reports List */}
          <FlatList
            data={filteredReports}
            renderItem={renderReportItem}
            keyExtractor={(item) => item.id}
            scrollEnabled={false}
            style={styles.reportsList}
          />

          {filteredReports.length === 0 && (
            <View style={styles.emptyState}>
              <Text style={styles.emptyIcon}>📊</Text>
              <Text style={styles.emptyTitle}>No reports found</Text>
              <Text style={styles.emptySubtitle}>
                {searchTerm || filterType !== 'all' || filterStatus !== 'all'
                  ? 'Try adjusting your search or filter criteria'
                  : 'Generate your first report to get started'}
              </Text>
            </View>
          )}
        </View>
      </View>

      <TouchableOpacity 
        style={styles.backButton} 
        onPress={() => navigation.goBack()}
      >
        <Text style={styles.backButtonText}>← Back to Admin Menu</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

export default AdminReports;

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    paddingTop: screenHeight < 700 ? 20 : 32,
    paddingBottom: screenHeight < 700 ? 20 : 32,
    paddingHorizontal: screenWidth < 400 ? 12 : 20,
    backgroundColor: '#f5f5f5',
  },
  
  gridContainer: {
    gap: screenHeight < 700 ? 16 : 24,
  },
  
  statsRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: screenWidth < 400 ? 12 : 16,
  },
  
  statCard: {
    flex: screenWidth < 400 ? 0.48 : 1,
    minWidth: screenWidth < 400 ? 120 : 150,
    borderRadius: 4,
    padding: screenWidth < 400 ? 12 : 16,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  
  statContent: {
    flexDirection: screenWidth < 400 ? 'column' : 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  
  statNumber: {
    fontSize: screenWidth < 400 ? 24 : 32,
    fontWeight: 'bold',
    color: 'white',
    textAlign: screenWidth < 400 ? 'center' : 'left',
  },
  
  statLabel: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: 'white',
    opacity: 0.9,
    textAlign: screenWidth < 400 ? 'center' : 'left',
  },
  
  statIcon: {
    fontSize: screenWidth < 400 ? 30 : 40,
    opacity: 0.8,
    alignSelf: screenWidth < 400 ? 'center' : 'auto',
  },
  
  quickStats: {
    flexDirection: 'row',
    gap: screenWidth < 400 ? 12 : 16,
  },
  
  quickStatCard: {
    flex: 1,
    borderRadius: 4,
    padding: screenWidth < 400 ? 16 : 20,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  
  quickStatContent: {
    flexDirection: screenWidth < 400 ? 'column' : 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  
  quickStatNumber: {
    fontSize: screenWidth < 400 ? 20 : 24,
    fontWeight: 'bold',
    color: 'white',
    textAlign: screenWidth < 400 ? 'center' : 'left',
  },
  
  quickStatLabel: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: 'white',
    opacity: 0.9,
    textAlign: screenWidth < 400 ? 'center' : 'left',
  },
  
  quickStatIcon: {
    fontSize: screenWidth < 400 ? 24 : 32,
    opacity: 0.8,
    alignSelf: screenWidth < 400 ? 'center' : 'auto',
  },
  
  managementPaper: {
    backgroundColor: '#ffffff',
    borderRadius: 4,
    padding: screenWidth < 400 ? 16 : 24,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  
  managementHeader: {
    flexDirection: screenWidth < 400 ? 'column' : 'row',
    justifyContent: 'space-between',
    alignItems: screenWidth < 400 ? 'flex-start' : 'center',
    marginBottom: screenHeight < 700 ? 16 : 24,
    gap: screenWidth < 400 ? 12 : 0,
  },
  
  managementTitle: {
    fontSize: screenWidth < 400 ? 20 : 24,
    fontWeight: 'bold',
    color: '#1976d2',
  },
  
  addButton: {
    backgroundColor: '#1976d2',
    paddingHorizontal: screenWidth < 400 ? 12 : 16,
    paddingVertical: screenHeight < 700 ? 10 : 12,
    borderRadius: 4,
    alignSelf: screenWidth < 400 ? 'stretch' : 'auto',
  },
  
  addButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: screenWidth < 400 ? 14 : 16,
    textAlign: screenWidth < 400 ? 'center' : 'left',
  },
  
  filtersContainer: {
    marginBottom: screenHeight < 700 ? 16 : 24,
    gap: screenHeight < 700 ? 12 : 16,
  },
  
  searchInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 4,
    padding: screenWidth < 400 ? 10 : 12,
    backgroundColor: 'white',
    fontSize: screenWidth < 400 ? 14 : 16,
  },
  
  filterRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: screenWidth < 400 ? 6 : 8,
  },
  
  filterButton: {
    paddingHorizontal: screenWidth < 400 ? 12 : 16,
    paddingVertical: screenHeight < 700 ? 6 : 8,
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    backgroundColor: 'white',
  },
  
  activeFilter: {
    backgroundColor: '#1976d2',
    borderColor: '#1976d2',
  },
  
  filterText: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: '#666',
  },
  
  activeFilterText: {
    color: 'white',
  },
  
  reportsList: {
    gap: screenHeight < 700 ? 12 : 16,
  },
  
  reportCard: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: screenWidth < 400 ? 12 : 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    width: '100%',
    minHeight: screenWidth < 400 ? 120 : 100,
  },
  
  reportHeader: {
    flexDirection: screenWidth < 400 ? 'column' : 'row',
    justifyContent: 'space-between',
    alignItems: screenWidth < 400 ? 'flex-start' : 'flex-start',
    marginBottom: screenHeight < 700 ? 8 : 12,
    gap: screenWidth < 400 ? 8 : 0,
  },
  
  reportInfo: {
    flex: 1,
    minWidth: 0,
  },
  
  reportTitle: {
    fontSize: screenWidth < 400 ? 16 : 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
    flexWrap: 'wrap',
    flexShrink: 1,
  },
  
  reportPeriod: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: '#666',
    marginBottom: 4,
    flexWrap: 'wrap',
    flexShrink: 1,
  },
  
  reportGeneratedBy: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: '#666',
    marginBottom: screenHeight < 700 ? 6 : 8,
    flexWrap: 'wrap',
    flexShrink: 1,
  },
  
  reportMeta: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: screenWidth < 400 ? 8 : 12,
  },
  
  reportSize: {
    fontSize: screenWidth < 400 ? 10 : 12,
    color: '#666',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: screenWidth < 400 ? 6 : 8,
    paddingVertical: screenHeight < 700 ? 3 : 4,
    borderRadius: 4,
    flexWrap: 'wrap',
    flexShrink: 1,
  },
  
  reportDownloads: {
    fontSize: screenWidth < 400 ? 10 : 12,
    color: '#666',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: screenWidth < 400 ? 6 : 8,
    paddingVertical: screenHeight < 700 ? 3 : 4,
    borderRadius: 4,
    flexWrap: 'wrap',
    flexShrink: 1,
  },
  
  reportLastDownload: {
    fontSize: 12,
    color: '#666',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  
  reportStatus: {
    alignItems: 'flex-end',
  },
  
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
  },
  
  statusText: {
    fontSize: 12,
    color: 'white',
    fontWeight: 'bold',
  },
  
  reportActions: {
    flexDirection: 'row',
    gap: 8,
  },
  
  actionButton: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4,
    alignItems: 'center',
  },
  
  downloadButton: {
    backgroundColor: '#388e3c',
  },
  
  viewButton: {
    backgroundColor: '#1976d2',
  },
  
  shareButton: {
    backgroundColor: '#f57c00',
  },
  
  cancelButton: {
    backgroundColor: '#d32f2f',
  },
  
  actionButtonText: {
    color: 'white',
    fontSize: screenWidth < 400 ? 10 : 12,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  
  emptyState: {
    alignItems: 'center',
    paddingVertical: screenHeight < 700 ? 24 : 32,
  },
  
  emptyIcon: {
    fontSize: screenWidth < 400 ? 60 : 80,
    color: '#ccc',
    marginBottom: screenHeight < 700 ? 12 : 16,
  },
  
  emptyTitle: {
    fontSize: screenWidth < 400 ? 16 : 18,
    fontWeight: 'bold',
    color: '#666',
    marginBottom: screenHeight < 700 ? 6 : 8,
    textAlign: 'center',
  },
  
  emptySubtitle: {
    fontSize: screenWidth < 400 ? 12 : 14,
    color: '#999',
    textAlign: 'center',
    marginBottom: screenHeight < 700 ? 12 : 16,
    paddingHorizontal: screenWidth < 400 ? 20 : 0,
  },
  
  backButton: {
    backgroundColor: '#666',
    paddingVertical: screenHeight < 700 ? 10 : 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: screenHeight < 700 ? 16 : 20,
  },
  backButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: screenWidth < 400 ? 14 : 16,
  },
});
